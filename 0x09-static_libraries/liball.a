!<arch>
0-isupper.c/    0           0     0     644     248       `
#include "main.h"

/**
  * _isupper - checks for uppercase character
  * @c: the character to check
  *
  * Return: returns int either 1 or 0
  */
int _isupper(int c)
{
	if (c >= 65 && c <= 80)
		return (1);
	else
		return (0);
	_putchar('\n');
}

0-memset.c/     0           0     0     644     377       `
#include "main.h"

/**
  * _memset -  fills the first n bytes of the memory area pointed to by s with the constant byte b
  * @s: the memory area
  * @b: the constant byte
  * @n: number of byte
  *
  * Return: Returns a pointer to the memory area s
  */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for(i = 0; i < n; i++)
		*(s + i) = b;
	return (s);
}

0-strcat.c/     0           0     0     644     378       `
#include "main.h"

/**
  * _strcat.c -  appends the two strings
  * @dest: copy to.
  * @src: copy from.
  *
  * Return: Returns a pointer to the resulting string dest
  */
char *_strcat(char *dest, char *src)
{
	int i, j;

	while (*(dest + i) != '\0')
		i++;
	while (j >= 0)
	{
		*(dest + i) = *(src + j);
		if (*(src + j) == '\0')
			break;
		i++;
		j++;
	}
	return (dest);
}
1-isdigit.c/    0           0     0     644     235       `
#include "main.h"

/**
  * _isdigit - checks if c is digit
  * c: character to check if digit
  *
  * Return: returns 1 for digit and 0 otherwise
  */
int _isdigit(int c)
{
	if ( c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     278       `
#include "main.h"

/**
  * _memcpy - copies memory area.
  * @dest: copy to
  * @src: copy from
  *
  * Return: Returns a pointer to dest
  */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for(i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     377       `
#include "main.h"

/**
  * _strcat.c -  appends the two strings
  * @dest: copy to.
  * @src: copy from.
  * @n: maximum size from src
  *
  * Return: Returns a pointer to the resulting string dest
  */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0;

	while (dest[j] != '\0')
		j++;
	for (i = 0; src[i] && i < n; i++)
		dest[j++] = src[i];
	return (dest);
}

100-atoi.c/     0           0     0     644     86        `
#include "main.h"

int _atoi(char *s)
{
	if (*s == 'p')
		return (0);
	return (0);
}

2-strchr.c/     0           0     0     644     422       `
#include "main.h"

/**
  * strchr - locates a character in a string.
  * @s: The string to search
  * @c: the character to search for
  *
  * Return: Returns a pointer to the first
  * occurrence of the character c in the string s,
  * or NULL if the character is not found
  */
char *_strchr(char *s, char c)
{
	int i = 0;

	while (*(s + i) != '\0')
	{
		if (*(s + i) == c)
			return (s + i);
		i++;
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     245       `
#include "main.h"

/**
  * _strlen - returns the length of a string.
  * @s: the string to check
  *
  * Return: returns the length of a string.
  */
int _strlen(char *s)
{
	int lenght;
	lenght = 0;

	while(*s++)
		lenght++;
	return (lenght);
}

2-strncpy.c/    0           0     0     644     115       `
#include "main.h"

char *_strncpy(char *dest, char *src, int n)
{
	while (n < 4)
		return (src);
	return (dest);
}

3-islower.c/    0           0     0     644     216       `
#include "main.h"

/**
  * _islower -  checks for lowercase character
  * @c: number to check
  *
  * Return: returns zero (0)
  */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     224       `
#include "main.h"

/**
  * _puts - prints a string
  * @str: pointer to the string
  *
  * Return: returns void
  */
void _puts(char *str)
{
	int i;

	while (*(str ++))
	{
		_putchar(*(str ++));
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     257       `
#include "main.h"

/**
  * _strcmp - work exactly like strcmp
  * @s1: first string
  * @s2: second string
  *
  * Return: returns integer
  */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     477       `
#include "main.h"

/**
  * strspn - gets the length of a prefix substring
  * @s:  the initial segment
  * @accept: the string to search through
  *
  * Return: Returns the number of bytes in the initial segment of s which consist only of bytes from accept
  */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, k;

	while ((*s + i) != '\0')
	{
		while (*(accept + j) != '\0')
		{
			if (*(s + i) == *(accept + k))
				k++;
			j++;
		}
		i++;
	}
	return (k);
}

4-isalpha.c/    0           0     0     644     235       `
#include "main.h"

/**
  * _isalpha - checks for alphabet
  * @c: number to check
  *
  * Return: returns either 1 or 0
  */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     498       `
#include "main.h"

/**
  * _strpbrk - searches a string for any of a set of bytes.
  * @s: string to checjk
  * @accept: string to check from.
  * Return: returns a pointer to the byte in s that matches one of the
  * bytes in accept, or NULL if no such byte is found.
  */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;
	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     104       `
#include "main.h"

char *_strstr(char *haystack, char *needle)
{
	*needle = 'p';

	return (haystack);
}
6-abs.c/        0           0     0     644     212       `
#include "main.h"

/**
  * _abs - computes the absolute value of an integer
  * @r: number to work with
  *
  * Return: returns integer
  */
int _abs(int r)
{
	if (r < 0)
		return (r * -1);
	else
		return (r);
}
9-strcpy.c/     0           0     0     644     379       `
#include "main.h"

/**
  * *_strcpy - copies the string pointed to by src, including the terminating null byte (\0), to the buffer pointed to by dest.
  * @dest: the buffer to print in
  * @src: where to copy ctring from.
  *
  * Return: returns char
  */
char *_strcpy(char *dest, char *src)
{
	int i;
	i = 0;

	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}

_putchar.c/     0           0     0     644     95        `
#include "main.h"
#include <stdio.h>

int _putchar(char c)
{
	printf("%c", c);

	return (0);
}

